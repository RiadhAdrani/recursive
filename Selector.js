export default ({
     alignContent,
     alignItems,
     alignSelf,
     all,
     animation,
     backfaceVisibility,
     background,
     border,
     borderImage,
     borderRadius,
     bottom,
     boxDecorationBreak,
     boxShadow,
     boxSizing,
     breakAfter,
     breakBefore,
     breakInside,
     captionSide,
     caretColor,
     clear,
     clip,
     color,
     columns,
     columnFill,
     columnRule,
     columnSpan,
     content,
     cursor,
     direction,
     display,
     emptyCells,
     filter,
     flex,
     flexFlow,
     float,
     font,
     gap,
     grid,
     gridArea,
     gridColumn,
     gridGap,
     gridRow,
     gridTemplate,
     hangingPunctuation,
     height,
     hyphens,
     imageRendering,
     isolation,
     justifyContent,
     left,
     letterSpacing,
     lineHeight,
     listStyle,
     margin,
     maxHeight,
     maxWidth,
     minHeight,
     minWidth,
     mixBlendMode,
     objectFit,
     objectPosition,
     opacity,
     order,
     outline,
     outlineOffset,
     overflow,
     overflowX,
     overflowY,
     padding,
     pageBreakAfter,
     pageBreakBefore,
     pageBreakInside,
     perspective,
     perspectiveOrigin,
     pointerEvents,
     position,
     quotes,
     resize,
     right,
     scrollBehavior,
     tabSize,
     tableLayout,
     textAlign,
     textAlignLast,
     textDecoration,
     textIndent,
     textJustify,
     textOverflow,
     textShadow,
     textTransform,
     top,
     transform,
     transformOrigin,
     transformStyle,
     transition,
     userSelect,
     vertialAlign,
     visibility,
     whiteSpace,
     width,
     wordBreak,
     wordSpacing,
     wordWrap,
     writingMode,
     zIndex,
}) => {
     const attr = [
          alignContent ? `align-content:${alignContent};` : ``,
          alignItems ? `align-items:${alignItems};` : ``,
          alignSelf ? `align-self:${alignSelf};` : ``,
          all ? `all:${all};` : ``,
          animation ? `animation:${animation};` : ``,
          backfaceVisibility ? `backface-visibility:${backfaceVisibility};` : ``,
          background ? `background:${background};` : ``,
          border ? `border:${border};` : ``,
          borderImage ? `border-image:${borderImage};` : ``,
          borderRadius ? `border-radius:${borderRadius};` : ``,
          bottom ? `bottom:${bottom};` : ``,
          boxDecorationBreak ? `box-decoration-break:${boxDecorationBreak};` : ``,
          boxShadow ? `box-shadow:${boxShadow};` : ``,
          boxSizing ? `box-sizing:${boxSizing};` : ``,
          breakAfter ? `break-after:${breakAfter};` : ``,
          breakBefore ? `break-before:${breakBefore};` : ``,
          breakInside ? `break-inside:${breakInside};` : ``,
          captionSide ? `caption-side:${captionSide};` : ``,
          caretColor ? `caret-color:${caretColor};` : ``,
          clear ? `clear:${clear};` : ``,
          clip ? `clip:${clip};` : ``,
          columns ? `columns:${columns};` : ``,
          columnFill ? `column-fill:${columnFill};` : ``,
          columnRule ? `column-rule:${columnRule};` : ``,
          columnSpan ? `column-span:${columnSpan};` : ``,
          color ? `color:${color};` : ``,
          content ? `content:${content};` : ``,
          cursor ? `cursor:${cursor};` : ``,
          direction ? `direction:${direction};` : ``,
          display ? `display:${display};` : ``,
          emptyCells ? `empty-cells:${emptyCells};` : ``,
          filter ? `filter:${filter};` : ``,
          flex ? `flex:${flex};` : ``,
          flexFlow ? `flex-flow:${flexFlow};` : ``,
          float ? `float:${float};` : ``,
          font ? `font:${font};` : ``,
          gap ? `gap:${gap};` : ``,
          grid ? `grid:${grid};` : ``,
          gridArea ? `grid-area:${gridArea};` : ``,
          gridColumn ? `grid-column:${gridColumn};` : ``,
          gridGap ? `grid-gap:${gridGapd};` : ``,
          gridRow ? `grid-row:${gridRow};` : ``,
          gridTemplate ? `grid-template:${gridTemplate};` : ``,
          hangingPunctuation ? `hanging-punctuation:${hangingPunctuation};` : "",
          height ? `height:${height};` : "",
          hyphens ? `hyphens:${hyphens};` : "",
          imageRendering ? `image-rendering:${imageRendering};` : "",
          isolation ? `isolation:${isolation};` : "",
          justifyContent ? `justify-content:${justifyContent};` : "",
          left ? `left:${left};` : "",
          letterSpacing ? `letter-spacing:${letterSpacing};` : "",
          lineHeight ? `line-height:${lineHeight};` : "",
          listStyle ? `list-style:${listStyle};` : "",
          margin ? `margin:${margin};` : "",
          maxHeight ? `max-height:${maxHeight};` : "",
          maxWidth ? `max-width:${maxWidth};` : "",
          minHeight ? `min-height:${minHeight};` : "",
          minWidth ? `min-width:${minWidth};` : "",
          mixBlendMode ? `mix-blend-mode:${mixBlendMode};` : "",
          objectFit ? `object-fit:${objectFit};` : "",
          objectPosition ? `object-position:${objectPosition};` : "",
          opacity ? `opacity:${opacity};` : "",
          order ? `order:${order};` : "",
          outline ? `outline:${outline};` : "",
          outlineOffset ? `outline-offset:${outlineOffset};` : "",
          overflow ? `overflow:${overflow};` : "",
          overflowX ? `overflow-x:${overflowX};` : "",
          overflowY ? `overflow-y:${overflowY};` : "",
          padding ? `padding:${padding};` : "",
          pageBreakAfter ? `page-break-after:${pageBreakAfter};` : "",
          pageBreakBefore ? `page-break-before:${pageBreakBefore};` : "",
          pageBreakInside ? `page-break-inside:${pageBreakInside};` : "",
          perspective ? `perspective:${perspective};` : "",
          perspectiveOrigin ? `perspective-origin:${perspectiveOrigin};` : "",
          pointerEvents ? `pointer-events:${pointerEvents};` : "",
          position ? `position:${position};` : "",
          quotes ? `quotes:${quotes};` : "",
          resize ? `resize:${resize};` : "",
          right ? `right:${right};` : "",
          scrollBehavior ? `scroll-behavior:${scrollBehavior};` : "",
          tabSize ? `tab-size:${tabSize};` : "",
          tableLayout ? `table-layout:${tableLayout};` : "",
          textAlign ? `text-align:${textAlign};` : "",
          textAlignLast ? `text-align-last:${textAlignLast};` : "",
          textDecoration ? `text-decoration:${textDecoration};` : "",
          textIndent ? `text-indent:${textIndent};` : "",
          textJustify ? `text-justify:${textJustify};` : "",
          textOverflow ? `text-overflow:${textOverflow};` : "",
          textShadow ? `text-shadow:${textShadow};` : "",
          textTransform ? `text-transform:${textTransform};` : "",
          top ? `top:${top};` : "",
          transform ? `transform:${transform};` : "",
          transformOrigin ? `transform-origin:${transformOrigin};` : "",
          transformStyle ? `transform-style:${transformStyle};` : "",
          transition ? `transition:${transition};` : "",
          userSelect ? `user-select:${userSelect};` : "",
          vertialAlign ? `vertical-align:${vertialAlign};` : "",
          whiteSpace ? `white-space:${whiteSpace};` : "",
          width ? `width:${width};` : "",
          wordBreak ? `word-break:${wordBreak};` : "",
          wordSpacing ? `word-spacing:${wordSpacing};` : "",
          wordWrap ? `word-wrap:${wordWrap};` : "",
          writingMode ? `writing-mode:${writingMode};` : "",
          zIndex ? `z-index:${zIndex};` : "",
     ];

     let css = "";
     attr.forEach((element) => {
          if (element) {
               css += element;
          }
     });

     return css;
};
